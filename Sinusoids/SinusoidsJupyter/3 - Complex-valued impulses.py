"""CS356 Complex-valued impulses - supplementary material

Written to accompany lectures for a module called:
CS356 Signal, image, and optical processing
Thomas J. Naughton, Maynooth University Department of Computer Science,
Maynooth, County Kildare, Ireland
tomn@cs.nuim.ie
http://www.cs.nuim.ie/~tomn
Created: tjn, CS, NUIM, 25 X 2013
Modified:
tjn, CS, MU, 20 XII 2017, complex-valued sinusoid definition
tjn, CS, MU, 2 XI 2020, updated for Jupyter Notebook

Tested with Python 3.7.3 on Jupyter Notebook 6.0.3.

Implementation note: my plots in lectures appear in separate windows because
the projector screen is so small. You may be happy with them appearing inline
in the IPython console (as they do by default). If you'd like the plots to
appear in separate windows then in the Spyder 2.3.1. toolbar go to:
Tools -> Preferences -> IPython Console -> Graphics
and under "Graphics backend" change the "Backend" selection from "Inline" to
"Automatic".

Execution note: This code is not designed to run in its entirety in one go.
Instead, it is designed to be highlighted piece by piece in Spyder and executed
by pressing F9.

Notes to students:
- See elsewhere for a reminder of some properties of complex values
(definitions: real, imaginary, amplitude, phase, complex sum, multiplying by
a particular phase angle)
- Make sure the file plotsinusoid.py is in your current working directory
- In this worksheet we look in more detail at the FT of impulse functions
"""

from numpy import arange, zeros, array, floor, ceil
import matplotlib

from plotsinusoid import add_impulse, plot_sinusoid
from quickfunctions import quick_close

matplotlib.rcParams.update({'font.size': 15})
# matplotlib.rcParams.update({'savefig.dpi': 300})
# matplotlib.rcParams['figure.figsize'] = [12, 8]
# matplotlib.rcParams['figure.dpi'] = 150
# %matplotlib notebook
# %matplotlib widget


"""
Recall the simple implementation from a previous worksheet to create sinusoids
by Fourier transforming a pair of impulse functions.
"""

quick_close()
M = 1024
# Horizontal axis values for the plot centred on zero (we could use 0..M-1
# instead, if we desired).
x = arange(-1 * floor(M / 2.0), ceil(M / 2.0), dtype='int')
a = zeros(M)
add_impulse(x, a, 1, M / 2.0)

"""
The sinusoid above isn't a classic sine: it has the incorrect phase (it should
be shifted such that it is zero at the origin). To generate a classic sine,
you need to use imaginary values for the impulse functions, as shown below.
The code below also labels the horizontal axis in radians, ensures the
sinusoid has an amplitude of 1, and automatically calculates the symmetric
positions of the impulse functions.
"""

# Creating a real-valued sine with various frequencies. Note that by
# changing the frequency only, other properties such as amplitude and
# phase remain the same.
# [In the examples below, ignore that for even pixel positions we need to
# negate the impulse values (multiply by -1).]
plot_sinusoid(1, 1, array([-1j, 1j]), figs='r')
plot_sinusoid(2, 1, -1 * array([-1j, 1j]), figs='r')
plot_sinusoid(3, 1, array([-1j, 1j]), figs='r')
plot_sinusoid(4, 1, -1 * array([-1j, 1j]), figs='r')

# We have flexible control over the complex-valued sinusoids that can be
# created, as shown below.
# Create imaginary-valued sine
quick_close()
plot_sinusoid(3, 1, [1., -1.], figs='a')
# Create real-valued cosine
quick_close()
plot_sinusoid(3, 1, [-1., -1.], figs='f')
# Create imaginary-valued cosine
quick_close()
plot_sinusoid(3, 1, [-1j, -1j], figs='f')

"""

Repeating two concepts you've seen before: Fourier transform of a delta
function, and generating the sum of three sinusoids.

As shown before, it is interesting that a real-valued constant signal can be
generated by a single real-valued peak (referred to as an impulse, or as a
delta function) at the origin. This pixel corresponds to a spatial frequency
of zero. In a FT, the pixel at the origin is called the dc value of the FT.
The relevance of the dc will be discussed later, when we give a mathematical
justification for what is shown by the code below. We now extend what we saw
previously with real-valued delta functions to complex-valued delta
functions; we find that the result of Fourier transforming a complex-valued
impulse at the origin is a complex-valued constant signal.

The complex value in the constant signal could be plotted in the complex
plane to satisfy yourself that the real-imaginary and amplitude-phase pairs
do describe the same complex value.

"""

# First recall the FT of a real-valed dc
quick_close()
plot_sinusoid(0, 1, [1., 1.], figs='f')
# Next the FT of a complex-valued dc
plot_sinusoid(0, 1, [1j, 1.], figs='f')

"""
Complex-valued sinusoids: A complex-valued sinusoid is a signal/image
that has a sinusoid in its real part and a sinusoid in its imaginary
part.

Recall, a signal/image with a constant value everywhere (such as zero)
is a special case of a sinusoid (a sinusoid with zero frequency). This
means that a real-valued sinusoid (a sinusoid in its real part and zeros
in its imaginary part) is a complex-valued sinusoid and an imaginary-
valued sinusoid (a sinusoid in its imaginary part and zeros in its real
part) is also a complex-valued sinusoid.

So, every sinusoid dealt with in CS356 lectures is a complex-valued
sinusoid. You will recall that in almost all cases where the code deals
with sinusoids, both the real and imaginary parts of signals have been
displayed, even if one of them was zero. If you're asked to give a
complex-valued signal or image in a CS356 exam question, make sure that
you specify both the real and imaginary parts.
"""

# You've seen this technique (below) before, of combining three sinusoids by
# generating three real-valued pairs of impulses and Fourier transforming.
# Now, we extend this to complex-valued impulses, and this time look at the
# imaginary parts of the combined sinusoids.
# There are four possibilities: (i) the three sinusoids appear in the real
# part of the signal, (ii) the three sinusoids appear in the imaginary part of
# the signal, (iii) one sinusoid appears in the real part and two appear in
# the imaginary part, and (iv) two sinusoids appear in the real part and one
# appears in the imaginary part.
# Note, because the amplitude of a complex-valued signal is a combination of
# both the real and imaginary parts (remember Pythagoras' theorem), for each
# of the four possibilities outlined above, the amplitude will contain three
# sinusoids.

# Here's an example of three complex-valued impulses generating a real-only
# signal (or, strictly speaking, a complex-valued signal where the imaginary
# part is zero).
quick_close()
plot_sinusoid([1, 7, 25],
              [1, 0.3, 0.1],
              [[1j, -1j], [1j, -1j], [1j, -1j]])

# Here's an example of three complex-valued impulses generating a complex-
# valued signal with nonzero real and imaginary values.
quick_close()
plot_sinusoid([1, 7, 25],
              [1, 0.3, 0.1],
              [[1j, -1j], [1, 1], [1, -1]])

# It is not important that we understand why particular complex-values in our
# impulses give rise to particular sinusoid properties.
# The important thing to appreciate with these examples is that each possible
# combination of parameters that can influence the amplitude, frequency, and
# shift (phase) of a sinusoid can be represented by a complex-valued pair of
# values in its Fourier domain.
